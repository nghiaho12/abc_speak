FROM debian:12.8

RUN apt update && \
    apt install -y g++ git cmake wget unzip pkg-config openjdk-17-jdk ant python3 autoconf libtool bzip2 unzip wget sox gfortran

# Android SDK
RUN wget https://dl.google.com/android/repository/android-ndk-r27c-linux.zip && \
    unzip android-ndk-r27c-linux.zip

WORKDIR /android-sdk
RUN wget https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip && \
    unzip commandlinetools-linux-11076708_latest.zip

RUN cd cmdline-tools/bin && \
    yes | ./sdkmanager --licenses --sdk_root=/android-sdk && \
    ./sdkmanager "platform-tools" "platforms;android-14" --sdk_root=/android-sdk

WORKDIR /

# Vosk API
RUN git clone https://github.com/alphacep/vosk-api.git
COPY vosk/build-vosk.sh vosk-api/android/lib
RUN cd vosk-api/android/lib && \
    git checkout cf67ed6 && \
    ANDROID_HOME=/android-sdk ANDROID_NDK_HOME=/android-ndk-r27c ./build-vosk.sh 

# SDL
RUN git clone  https://github.com/libsdl-org/SDL.git
RUN cd SDL/build-scripts && \
    git checkout 2d37903 && \
    PATH=$PATH:/android-ndk-r27c ./androidbuildlibs.sh

# Create Android project with an empty main.cpp to cache the gradle download step
RUN mkdir -p /abc_speak/src && \
    touch /abc_speak/src/main.cpp && \
    cd /SDL/build-scripts && \
    ./create-android-project.py org.libsdl.abc_speak /abc_speak/src/main.cpp

# Enable C++ STL
RUN cd /SDL/build/org.libsdl.abc_speak/app/jni && \
    sed -i 's/# APP_STL/APP_STL/g' Application.mk

# Enable C++20, think NDK only goes up to C++17 though.
RUN cd /SDL/build/org.libsdl.abc_speak/app/jni/src && \
    echo 'set(CMAKE_CXX_STANDARD 20)' >> CMakeLists.txt && \
    echo 'APP_CPPFLAGS := -std=c++20' >> /SDL/build/org.libsdl.abc_speak/app/jni/Application.mk

# Build the empty project to get everything in place
RUN cd /SDL/build/org.libsdl.abc_speak && \
    ANDROID_HOME=/android-sdk ANDROID_NDK_HOME=/android-ndk-r27c ./gradlew assembleDebug

# Gradle is now available, build Vosk for Android
COPY vosk/build.gradle /vosk-api/android/lib
RUN cd /vosk-api/android/lib && \
    ANDROID_HOME=/android-sdk `find /root/.gradle/wrapper -name gradle` build
RUN ln -s /vosk-api/android/lib/build/kaldi_* /SDL/build/org.libsdl.abc_speak/app/jni/src

# GLM 
RUN cd / && git clone -b 1.0.1 --depth 1 https://github.com/g-truc/glm.git
RUN cd /SDL/build/org.libsdl.abc_speak/app/jni/src && \
    ln -s /glm/glm .

# Enable x86_64 build for debugging on the emulator
RUN cd /SDL/build/org.libsdl.abc_speak/app && \
    sed -i "s/abiFilters 'arm64-v8a'/abiFilters 'arm64-v8a','x86_64'/g" build.gradle && \
    sed -i "s/minSdkVersion 19/minSdkVersion 28/g" build.gradle && \
    sed -i "s/android-19/android-28/g" build.gradle 

# Finally build our project
RUN rm -rf /SDL/build/org.libsdl.abc_speak/app/src/main/res/

COPY src /SDL/build/org.libsdl.abc_speak/app/jni/src/
COPY assets /SDL/build/org.libsdl.abc_speak/app/src/main/assets/
COPY android/Android.mk /SDL/build/org.libsdl.abc_speak/app/jni/src
COPY android/AndroidManifest.xml /SDL/build/org.libsdl.abc_speak/app/src/main
COPY android/res/ /SDL/build/org.libsdl.abc_speak/app/src/main/res/

# third party licenses
RUN cd /SDL/build/org.libsdl.abc_speak/app/src/main/assets && \
    mkdir licenses && \
    cd licenses && \
    mkdir SDL3 && cp /SDL/LICENSE.txt SDL3 && \
    mkdir glm && cp /glm/copying.txt glm && \
    mkdir OpenBLAS && cp /vosk-api/android/lib/build/kaldi_x86_64/OpenBLAS/LICENSE OpenBLAS && \
    mkdir openfst && cp /vosk-api/android/lib/build/kaldi_x86_64/openfst/COPYING openfst && \
    mkdir vosk-api && cp /vosk-api/COPYING vosk-api

RUN cd /SDL/build/org.libsdl.abc_speak && \
    ANDROID_HOME=/android-sdk ANDROID_NDK_HOME=/android-ndk-r27c ./gradlew assembleDebug

ENV VERSION=1.0.0
RUN mv /SDL/build/org.libsdl.abc_speak/app/build/outputs/apk/debug/app-debug.apk \
    /SDL/build/org.libsdl.abc_speak/app/build/outputs/apk/debug/abc_speak-${VERSION}.apk

CMD ["/usr/bin/python3", "-m", "http.server", "--directory", "/SDL/build/org.libsdl.abc_speak/app/build/outputs/apk/debug"]
